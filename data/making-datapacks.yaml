making-datapacks:
    title: Making Datapacks
    text: What are you trying to do?
    opts:
      - text: Learn how to make an origins datapack
        link: first-datapack
      - text: Make/Use a specific power
        link: making-powers
      - text: Fix a bug (datapack isn't working)
        link: bug-fix
      - text: Install my datapack
        link: installing-datapacks
      - text: Something else...
        link: other

making-powers:
    title: Making Powers
    text: |
        Before making your own powers, you can check to see if one already exists in the base game in [this list (click here)](https://origins.readthedocs.io/en/latest/misc/base_contents/powers/). You can add these directly to the list of powers in your origin file.

        Some powers actually require you to use multiple powers in order to work properly. If you want to use a power of an existing origin, you can see the list of all powers the base game origins have in [this list (click here)](https://origins.readthedocs.io/en/latest/misc/base_contents/origins/).

        If the base powers do not suit your needs, or you would like them to be active only in certain conditions, then you will have to design your own custom powers. You'll have to create a new file for every new custom power you want. Every custom power has two parts; a power type that specifies how it works, and a [condition](#power-conditions) that specifies when the power should be active. By understanding these two parts and using them like basic building blocks, you can make almost any power you want.

        You can (and **should**) overview the complete list of power types on [this page of the Official Wiki (click here)](http://l.mathgeniuszach.com/p/). If you can't find what you want on there or just want some links for convenience, you can select what you want your power to do below to learn more (A lot of these still need to be worked on; if you see a TODO page, you might want to ask in the Discord instead).

        [If you want to learn more about conditions, click here](#power-conditions).
    opts:
      - text: How do I add a power to an origin?
        link: what-the-power
      - text: An existing power
        link: existing-power
      - text: Multiple powers... inside a single power!
        link: multiple-power
      - text: Toggleable power
        link: toggleable-power
      - text: Change the player size/reach (pehkui)
        link: pehkui-power
      - text: Add/Remove health/speed/attack/etc (any attribute)
        link: attribute-power
      - text: Give a status effect
        link: status-effect-power
      - text: Night vision
        link: night-vision-power
      - text: Change mob hostility
        link: mob-hostility-power
      - text: Enable creative flight
        link: creative-flight-power
      - text: Enable elytra flight (without an elytra equipped)
        link: elytra-flight-power
      - text: Modify a player "value" or "rate" (e.g., hunger, damage, break speed)
        link: modify-power
      - text: Prevent the player from doing something
        link: prevent-power
      - text: Perform an action one-time or repeatedly
        link: action-power
      - text: Immunity to status effects
        link: effect-immunity-power
      - text: Immunity to fire/lava
        link: fire-immunity-power
      - text: Fire a projectile
        link: projectile-power
      - text: Extra inventory
        link: inventory-power
      - text: Invisibility
        link: invisibility-power
      - text: Invulnerability
        link: invulnerability-power
      - text: Keep inventory
        link: keep-inventory-power
      - text: Launch (Upwards)
        link: launch-power
      - text: Replace a loot table
        link: loot-table-power
      - text: Restrict what armor can be worn
        link: restrict-armor-power
      - text: Some kind of "Energy" or "Waste"
        link: resource-power
      - text: Something else...
        link: other-power

modify-power:
    title: Modify Power
    short: |
        [Modifying power types (click here for full list)](http://l.mathgeniuszach.com/p/#modifying_types) modify the player's ability to do something or a stat, particularly things with numerical values.

        Each modify power can either provide multiple `modifiers` at once in a list, or just a single `modifier` only. Every modifier takes an "operation" (specifying how to modify the value), and a value (specifying how much to modify by). Operations of the same type are applied at the _same time_; this means their values are combined together first before being applied (You can see how each of these values are used in the chart online as ModValueA, ModValueB, ...).

        Resources can also be used instead of constant values. To use a resource instead, specify the resource power's id in the "Resource" field of the modifier. Make sure you also do not specify a value for this to work properly (in the Origin Creator make sure the field is blank).

        Most common operations are (see online page for full list):
        - `add_base_early` - (vanilla `addition`) performs addition with a number.
            <br>&nbsp;(Result = BaseValue + ModValueA + ModValueB + ...)
        - `multiply_total_additive` - (vanilla `multiply_base`) adds a non-stacking percentage of the current value (0.2 is +20%, two 0.2s is +40%, three 0.2s is +60%, etc)
            <br>&nbsp;(Result = OldValue + OldValue * (ModValueA + ModValueB + ...))
        - `multiply_total_multiplicative` - (vanilla `multiply_total`) adds a stacking percentage of the current value (0.2 is +20%, two 0.2s is +44%, three 0.2s is +72.8%, etc). Can also be thought of as multiplying by the value + 1 (0.2 is 1.2x, two 0.2s is 1.2x1.2x, three 0.2s is 1.2x1.2x1.2x)
    text: |
        [Modifying power types (click here for full list)](http://l.mathgeniuszach.com/p/#modifying_types) modify the player's ability to do something, particularly things with numerical values.

        Most notable "modify" powers are:

        - [Modify Attribute](http://l.mathgeniuszach.com/p/modify_attribute/) - modifies an attribute (max health, armor, attack). Possible attributes use the same names/values as the regular [Attribute power type (click here to learn more)](#attribute-power).
        - [Modify Player Spawn](http://l.mathgeniuszach.com/p/modify_player_spawn/) - modifies the player spawn point
        - [Modify Break Speed](http://l.mathgeniuszach.com/p/modify_break_speed/) - modifies the speed of breaking blocks
        - [Modify Damage Dealt](http://l.mathgeniuszach.com/p/modify_damage_dealt/) - modifies the amount of damage dealt
        - [Modify Damage Taken](http://l.mathgeniuszach.com/p/modify_damage_taken/) - modifies the amount of damage taken
        - [Modify Food](http://l.mathgeniuszach.com/p/modify_food/) - modifies the amount of food gained from eating
        - [Modify Exhaustion](http://l.mathgeniuszach.com/p/modify_exhaustion/) - modifies how much exhaust is received (causing hunger to deplete) when exhaust is received (from sprinting/jumping/etc)
        - [Modify Jump](http://l.mathgeniuszach.com/p/modify_jump/) - modifies jump height
        - [Modify Lava Speed](http://l.mathgeniuszach.com/p/modify_lava_speed/) - modifies lava swim speed
        - [Modify Swim Speed](http://l.mathgeniuszach.com/p/modify_swim_speed/) - modifies normal swim speed
        - [Modify Slipperiness](http://l.mathgeniuszach.com/p/modify_slipperiness/) - modifies friction
        - [Modify Velocity](http://l.mathgeniuszach.com/p/modify_velocity/) - modifies how velocity works

        Each modify power can either provide multiple `modifiers` at once in a list, or just a single `modifier` only. Every modifier takes an "operation" (specifying how to modify the value), and a value (specifying how much to modify by). Operations of the same type are applied at the _same time_; this means their values are combined together first before being applied (You can see how each of these values are used in the chart below as ModValueA, ModValueB, ...).
        
        Resources can also be used instead of constant values. To use a resource instead, specify the resource power's id in the "Resource" field of the modifier. Make sure you also do not specify a value for this to work properly (in the Origin Creator make sure the field is blank).

        Also, in the chart below, Result is the number result of the value being modified after the operation is applied, OldValue is the value beforehand (or current value of the attribute), and BaseValue is the default value. Vanilla operators correspond to some of these as well; `addition` = `add_base_early`; `multiply_base` = `multiply_total_additive`; `multiply_total` = `multiply_total_multiplicative`.

        Operations are ([for wiki list click here](https://origins.readthedocs.io/en/latest/types/data_types/attribute_modifier_operation/)):

        - `add_base_early` - (vanilla `addition`) performs addition with a number.
            <br>&nbsp;(Result = BaseValue + ModValueA + ModValueB + ...)
        - `multiply_base_additive` - adds a non-stacking percentage of the base/default value (0.2 is +20%, two 0.2s is +40%, three 0.2s is +60%, etc)
            <br>&nbsp;(Result = OldValue + BaseValue * (ModValueA + ModValueB + ...))
        - `multiply_base_multiplicative` - adds a stacking percentage of the current value (NOT THE BASE!) (0.2 is +20%, two 0.2s is +44%, three 0.2s is +72.8%, etc). Can also be thought of as multiplying by the value + 1 (0.2 is 1.2x, two 0.2s is 1.2x1.2x, three 0.2s is 1.2x1.2x1.2x)
            <br>&nbsp;(Result = OldValue * (1 + ModValueA) * (1 + ModValueB) * ...)
        - `add_base_late` - performs addition with a number, after the multiply_base operations occur.
            <br>&nbsp;(Result = OldValue + ModValueA + ModValueB + ...)
        - `min_base` - ensures that the result is greater than or equal to all the given values.
            <br>&nbsp;(Result = Math.max(CurrentValue, ModValueA, ModValueB, ...))
        - `max_base` - ensures that the result is less than or equal to all the given values.
            <br>&nbsp;(Result = Math.min(CurrentValue, ModValueA, ModValueB, ...))
        - `set_base` - sets the result to the value specified directly, before total operations are applied. Only use this ONCE, otherwise weird side effects can occur.
            <br>&nbsp;(Result = ModValue)
        - `multiply_total_additive` - (vanilla `multiply_base`) adds a non-stacking percentage of the current value (0.2 is +20%, two 0.2s is +40%, three 0.2s is +60%, etc)
            <br>&nbsp;(Result = OldValue + OldValue * (ModValueA + ModValueB + ...))
        - `multiply_total_multiplicative` - (vanilla `multiply_total`) adds a stacking percentage of the current value (0.2 is +20%, two 0.2s is +44%, three 0.2s is +72.8%, etc). Can also be thought of as multiplying by the value + 1 (0.2 is 1.2x, two 0.2s is 1.2x1.2x, three 0.2s is 1.2x1.2x1.2x)
            <br>&nbsp;(Result = OldValue * (1 + ModValueA) * (1 + ModValueB) * ...)
        - `min_total` - ensures that the result is greater than or equal all the given values.
            <br>&nbsp;(Result = Math.max(CurrentValue, ModValueA, ModValueB, ...))
        - `max_total` - ensures that the result is less than or equal to all the given values.
            <br>&nbsp;(Result = Math.min(CurrentValue, ModValueA, ModValueB, ...))
        - `set_total` - sets the result to the value specified directly, after other total operations are applied. Only use this ONCE, otherwise weird side effects can occur.
            <br>&nbsp;(Result = ModValue)

        All of these powers can be combined with a condition to only modify values things when a certain condition is true. [For more about conditions, click here](#power-conditions).

prevent-power:
    title: Prevent Power
    text: |
        [Preventing power types (click here for full list, at bottom of page)](http://l.mathgeniuszach.com/p/#preventing_types) prevent the individual with the power from doing specific things in particular.

        Most notable "prevent" powers are:
        
        - [Prevent Block Use](http://l.mathgeniuszach.com/p/prevent_block_use/) - prevents right clicking a block
        - [Prevent Death](http://l.mathgeniuszach.com/p/prevent_death/) - prevents damage from killing.
        - [Prevent Elytra Flight](http://l.mathgeniuszach.com/p/prevent_elytra_flight/) - prevents flying with an elytra
        - [Prevent Entity Render](http://l.mathgeniuszach.com/p/prevent_entity_render/) - prevents seeing certain entities
        - [Prevent Item Use](http://l.mathgeniuszach.com/p/prevent_item_use/) - prevents using items (but not placing blocks)
        - [Prevent Sleep](http://l.mathgeniuszach.com/p/prevent_sleep/) - prevents sleeping, with an optional message
        - [Prevent Sprinting](http://l.mathgeniuszach.com/p/prevent_sprinting/) - prevents sprinting

        All of these powers can be combined with a condition to only prevent various things when a certain condition is true. [For more about conditions, click here](#power-conditions).

action-power:
    title: Action Power
    text: |
        [Action power types (click here for full list)](http://l.mathgeniuszach.com/p/#action-related) are more "event-driven" than typical power types. When a certain event occurs (e.g., using an item, pressing a key, over time, when dealing or taking damage), you can use one of these powers to "activate" an [Entity Action](http://origins.readthedocs.io/en/latest/types/entity_action_types). If you want to execute multiple actions or some actions based on specific rules or randomness, take a look at the [Meta Action Types](http://origins.readthedocs.io/en/latest/types/meta_action_types).

        Here's a list of common action-related power types:
        - [Active Self](http://l.mathgeniuszach.com/p/active_self) - pressing a key on the keyboard
        - [Action Over Time](http://l.mathgeniuszach.com/p/action_over_time) - repeatedly on a timer, and when the condition becomes true and false
        - [Action On Block Break](http://l.mathgeniuszach.com/p/action_on_block_break) - breaking a block
        - [Action On Block Use](http://l.mathgeniuszach.com/p/action_on_block_use) - right clicking a block
        - [Action On Callback](http://l.mathgeniuszach.com/p/action_on_callback) - respawning or gaining/losing the power/origin
        - [Action On Entity Use](http://l.mathgeniuszach.com/p/action_on_entity_use) - right clicking an entity
        - [Action On Hit](http://l.mathgeniuszach.com/p/action_on_hit) - hitting another entity
        - [Action When Hit](http://l.mathgeniuszach.com/p/action_when_hit) - getting hit by another entity
        - [Action When Damage Taken](http://l.mathgeniuszach.com/p/action_when_damage_taken) - taking damage

        All of these action powers can be combined with a [condition (click for more info)](#power-conditions) to only activate when a certain condition is true.

        For convenience, you can select from some simple actions below:
    opts:
      - text: Apply an action to certain entities nearby
        link: area-action
      - text: Raycast and apply action to hit block/entity
        link: raycast-action
      - text: Add velocity
        link: velocity-action
      - text: Add XP
        link: xp-action
      - text: Block action at
        link: block-action
      - text: Apply/clear effect
        link: effect-action
      - text: Damage/heal
        link: health-action
      - text: Open crafting-table/ender-chest
        link: open-inventory-action
      - text: Change/drop/add inventory items
        link: inventory-action
      - text: Play a sound
        link: sound-action
      - text: Spawn Particles
        link: particle-action
      - text: Spawn an entity
        link: spawn-action
      - text: Explode
        link: explode-action
      - text: Extinguish/set-on fire
        link: fire-action
      - text: Feed/Exhaust
        link: hunger-action
      - text: Run a command
        link: command-action
      - text: Something else...
        link: other-action

power-conditions:
    title: Power Conditions
    text: |
        Conditions specify *when* a power is active. A power will only "work" and exist when the condition is true. To make the power work when the condition is false, set the `inverted` field on the condition to true.

        Note that certain power types (the oldest ones, really) have two variants; a "normal" type, and a "conditioned" type. Conditions only work on the "conditioned" type.

        Every power condition is an "Entity Condition" that runs on the owner of the power as the entity. [Click here to see the complete list of regular Entity Conditions](http://l.mathgeniuszach.com/e/). If you want to combine conditions together, look at the [Meta Conditions list](https://origins.readthedocs.io/en/latest/types/meta_condition_types/), which provides logical operators and some other useful logic.

        If you can't find what you want on there or just want some links for convenience, you can click when you want your power to be active below to learn more:
    opts:
      - text: If in a biome
        link: biome-cond
      - text: If block/fluid...
        link: block-cond
      - text: If equipped item...
        link: item-cond
      - text: Raycast and check condition of entity/block
        link: raycast-cond
      - text: If time of day
        link: time-cond
      - text: If in dimension
        link: dimension-cond
      - text: If exposed to sky
        link: sky-cond
      - text: If stat (e.g., health, experience) above/below/equal-to value
        link: stat-cond
      - text: If in rain
        link: rain-cond
      - text: If on fire
        link: fire-cond
      - text: Check for passenger or mount
        link: riding-cond
      - text: If scoreboard/command/predicate/nbt
        link: server-side-cond
      - text: If living
        link: living-cond
      - text: If moving/sneaking/sprinting/swimming
        link: moving-cond
      - text: If something else...
        link: other-cond