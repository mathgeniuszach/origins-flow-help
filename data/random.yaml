bedrock-edition:
    title: Bedrock Edition
    text: The origins mod (and this flow-help) was originally only designed for the Java Edition of Minecraft; any origins recreations on Bedrock Edition are from third parties, much like the forge version of the mod. This help page unfortunately will most likely not be able to help you; however, you are welcome to go back and try following it anyway.

no:
    title: No
    text: Sorry, but the answer is unfortunately no. There are no solutions, workarounds, or anything else you can do to make the answer be "yes". You should stop trying, because you'll only tire yourself trying to find an answer that doesn't exist.

dot-minecraft:
    title: .minecraft Folder
    text: |
        For one reason or another, you may need to find where your `.minecraft` folder is located. The simplest way to locate it, is to launch your game, go to where you would load resource packs (Options... > Resource Packs), and click the "Open Pack Folder" button in the bottom left (1). Press the "Up one folder" button (2), and you're inside your `.minecraft` folder! If you use the vanilla launcher, I recommend bookmarking this folder so you can get back to it easily.

        ![Open pack folder button image](resource-packs-folder)
        ![Up a folder button image](resource-packs-up-one)

        Launchers like Prism Launcher and MultiMC have an easier way of doing this that doesn't require launching the game. Select an instance and click the "Folder" button on the right (1). Then you can double click to open your `.minecraft` folder (2). In these launchers, every instance has it's own `.minecraft` folder.

        ![Prism launcher folder button image](prism-launcher-folder)

        There are usually a lot of folders and files present in the `.minecraft` folder, but the only ones important for this wiki are the folders shown below:

        ![Dot Minecraft file contents image](dot-minecraft-contents)

        1. The "crash-reports" folder is where you would find crash reports if your game crashes.
        2. The "logs" folder shows many archived game logs (special information and messages that are stored while the game runs) and also the latest log as "latest.log".
        3. The "mods" folder is where mods are installed or uninstalled from.
        4. The "saves" folder is where your singleplayer worlds are stored.

world-folder:
    title: World Folder
    text: |
        Every world in minecraft is just a folder in someone's computer. Each world corresponds to exactly one folder.

        You can find a singleplayer world folder easily by selecting it in your singleplayer menu (1), clicking "Edit" in the bottom left (2), and then clicking "Open World Folder" in the menu that shows up (3).

        ![Picture of menu navigation to "Open World Folder"](world-folder)

        Your singleplayer world folders are all located inside the "saves" folder which is inside your [`.minecraft` folder](#dot-minecraft) (click to learn where that is).

        If you use a server hosting service, you may not be able to access the world folder directly. The methods differ between hosts and that's more than this guide covers, so you'll have to do more research yourself.

        If you open ports and self-host a server, the folder will typically be called "world" and will be in the same folder as the server jar.

crash-report:
    title: Mod Crash
    text: |
        So the game crashed, eh?
        
        Find [the crash report and your game log](#logs) (you can click the links to figure out how). If by reading them you have absolutely no idea what went wrong, first upload the crash report and your game log separately to a site like [https://mclo.gs/](https://mclo.gs/). You can copy-paste the text there and press "Save". copy paste the links in your url bar and save it for later.
        
        Once you've saved the logs, go to the `#bug-reports` channel of [the Origins Discord](https://discord.gg/4mTMHu3) and submit a [direct](/response/be-direct) and [specific](/response/be-specific) message explaining what you were doing before your game crashed that includes the links to your crash report and game log. Someone should be able to help you from there.

logs:
    title: Logs
    text: |
        For a variety of reasons you may need to access your Minecraft logs or crash reports. There are a few ways to get these.

        The easiest way is to navigate to your [.minecraft folder](#dot-minecraft) (click to find out how), and go into the "logs" folder for your game logs, or the "crash-reports" folder for crash reports. Note that crash reports are always dated, while the "logs" folder clearly shows which log is the latest. If you are going to share these with anyone else, pick the latest files.

        If you need to view these logs for any reason, you can do so in any text editor. If you need to find some text (e.g., "origins") in them, you can do so by pressing "Ctrl+F" and typing that text into the box that shows up. Sometimes you must press "Enter" a few times to find all matches individually.

file-extensions:
    title: File Extensions
    text: |
        For some reason, by default on Windows, file extensions are hidden and not normally visible.

        To show file extensions on Windows, open up Windows Search (Shortcut; Win+S) and type in "File Explorer Options" and open the respective program that shows up.

        In the new window that just popped up, select the "View" tab (1), uncheck the box that says "Hide extensions for known file types" (2), and click "Apply" (3). You can now close out of this window or click "Ok".

        ![Windows file options menu image](windows-file-extensions)

json-format:
    title: JSON Format
    text: |
        JSON Format (aka, JavaScript Object Notation), is a common format for storing and sharing information on the internet and on your computer. All Minecraft datapacks use JSON format to specify what items drop from mobs and can be found in chests (loot tables), what items can be crafted into other items (recipes), what must be met to get advancements, and what powers an origin has. JSON files are stored in files ending with `.json`.

        Here's a sample of some JSON code:

        ```json
        {
            "key": "Hello World! This doesn't actually get printed anywhere...",
            "another_key": "Some more text here",
        
        "spacing": "doesn't matter, though commas do",

            "the number two": 2,
            "the-number-three": 3,
            "the_number_four": 4.1,

            "booleanz": true,
            "4m ! c001?": false,

            "null because why not": null,

            "_comment": "Note that in JSON, comments are not allowed. So it's normally faked with '_comment.'",

            "nested": {
                "number": 3,
                "x": 59.8,
                "list_here": [
                    {"stuff": 3, "morestuff": "text"},
                    9,
                    ["nested", 0, "list", ""]
                ]
            },

            "quotedbackslash": "This is how you make a quote symbol: \"  If you want to make a backslash symbol, use \\. \n is a line separator."

            "Notice": "the final line in json does not have a comma at the end."
        }
        ```

        The JSON code you'll come into contact with in datapacks will always have an opening and closing brace at the start and end. Inside these two braces are pairs of "keys" and "values", in the form `"key": value`. Keys can have any text in them except for the `"` character and the `\\` character (excluding special cases), but they will normally have to be specific values in order for Minecraft to understand them. Values can be text inside quotes ("text here", though `"` inside the quotes must be written as `\\"` and `\\` as `\\\\`), numbers (like 1, 2, 3, 4.5, 6.78), booleans (true/false, true usually meaning yes/enabled and false meaning no/disabled), potentially more json inside more braces `{}`, and lists of json. Values usually have very specific meaning like keys do. Note you cannot have two keys of the same name in the same level of json code.

        Pairs in an object or items in a list MUST have a comma at the end of them. The exception is the last pair or item, which MUST NOT have a comma at the end. Don't worry, programmers almost unanimously agree that this pattern is stupid - and have come up with better solutions - but it's what we got for Minecraft.

        If you're not using an IDE or the Origin Creator and need to check if some JSON is valid, paste it into [the box on this website](https://jsonlint.com/) and press "Validate JSON" on the left below the box. The website will tell you what line(s) are wrong.

        The [Official Wiki](https://origins.readthedocs.io/en/latest/) will often have JSON code at the bottom of specific powers or types:

        ![Picture of json code in the origins wiki](origins-wiki-json)

        The Origin Creator allows you to view and edit the JSON of whatever file you're working on if you click the </> button (1) at the top of the page. You can make changes in the box that appears (2), but be wary of errors (3). Once you've made your changes, press the upload button (4) to save them. If you don't like your changes, press the reset button (5) instead. You can also download the json as a file with the download button (6).

        ![Picture of the Origin Creator json editor](origin-creator-json)

other:
    title: Other
    text: Are you having an issue with the Origin Creator specifically?
    opts:
      - text: Yes
        link: oc-other
      - text: No
        link: raw-other

oc-other:
    title: Origin Creator Issue
    text: |
        Remember when asking for help, to [be specific (click here)](/response/be-specific), to [be direct (click here)](/response/be-direct), and to [be patient (click here)](/response/be-patient). This will help you obtain an answer faster.

        If you're having an issue with the Origin Creator that is not already addressed on this flow help, you can ask about it in [the Origin Creator Discord (click for link)](https://discord.gg/pBFqEcXvW5).

        If you're not having an issue with the Origin Creator specifically, then you can try to ask your question in [the Official Origins Discord](https://discord.gg/4mTMHu3) instead (if you are making a datapack, ask in the #datapack-dev forum channel), but they may not be able to help you, as most creators do not use the Origin Creator. Thus, if you ask for help with datapacking in the official Discord, it is suggested that you ask questions about the concepts found on the Wiki, as opposed to questions about the Origins Creator itself.

        Note that you may be immediately sent back to this flow help if you didn't go through it well enough.

raw-other:
    title: Generic Issue
    text: |
        Remember when asking for help, to [be specific (click here)](/response/be-specific), to [be direct (click here)](/response/be-direct), and to [be patient (click here)](/response/be-patient). This will help you obtain an answer faster.

        If you're having an issue unrelated to the Origin Creator, ask your question in the right channel in [the Official Origins Discord](https://discord.gg/4mTMHu3)!
        Use the chart below to find out which one is right for you:
        - #datapack-dev - If you're making a datapack. Create a forum post in this channel. Do not use #datapack-talk.
        - #datapack-installation - If you're installing a datapack.
        - #origins-support - If you're having an issue with the BASE GAME CONTENT or installing the mod.
        - #addon-support - If you're having an issue with an addon mod.
        - #wiki-suggestions - If you'd like to suggest a change or typo-fix in the wiki.
        - #origins-talk - If you don't know where else to go.
