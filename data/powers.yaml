what-the-power:
    title: Adding A Power to an Origin
    text: |
        If it is your first time creating an Origins datapack and you have no idea where to start, you should probably follow the "first datapack" guide by clicking the "I don't know where to start" button at the bottom of this page.

        If you've simply forgotten, you just need to take the id of your power and add it to the "powers" list of your origin. If you're using the Origin Creator, read the "Important Information" dropdown fully as it explains how to find it with a picture.
        
        If you still don't understand, you should probably rewatch the tutorial, or [seek further help](#other).

        Example origin [JSON](#json-format) with a power:
        ```json
        {
            "name": "Herobrine",
            "description": "The one who sees all",
            "powers": [
                "mypack:see_all",
                "mypack:evil",
                "mypack:schemer"
            ]
        }
        ```
    opts:
      - text: I don't know where to start
        link: first-datapack

existing-power:
    title: Existing Powers
    text: |
        You can find a list of all base origin powers and power ids [on this page of the wiki](https://origins.readthedocs.io/en/latest/misc/base_contents/powers/).

        If you want to use an existing power (NOT power type), for example a power that one of the base origins uses, you can do so by adding the id of that power to the "powers" list of your origin.

        Example origin [JSON](#json-format) with a base power:
        ```json
        {
            "name": "Egg Layer",
            "description": "Lays eggs when waking up",
            "powers": [
                "origins:lay_eggs"
            ]
        }
        ```

multiple-power:
    title: Multiple
    text: |
        The [Multiple `origins:multiple` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/multiple/) power type lets you squish a bunch of custom powers together into a single file. You may want to do this to fit a bunch of different effects into a single power name and description. Note that you could also alternatively just have two or more power files and just mark all but one as hidden.

        Every key in a power file that is not the name of a field like "name" or "description" is treated as a "sub-power". Each sub-power has its own condition and power type, and is marked as hidden by default so that only the super power shows up on the list of origin powers.
        
        You can refer to sub-powers via the id: `{namespace}:{super-power}_{key}`, where you replace {namespace}, {super-power} and {key} with the appropriate values. So a sub-power named "banana" in the super power "mypack:fruity" can be referred to as "mypack:fruity_banana".

        Note! Multiple power types DO NOT support a condition on the ENTIRE power. If you want that, you'll have to copy-paste the condition to every sub-power individually.

        To use this power type in the Origin Creator, change the dropdown in the top left from `single` to `multiple`. You can press the "+" button at the bottom to add more sub-powers.
        ![Power type dropdown](power-type-dropdown)

        Example multiple power [JSON](#json-format):
        ```json
        {
            "name": "Egg Layer",
            "description": "Lays eggs on wake up",
            "powers": [
                "origins:lay_eggs"
            ]
        }
        ```

toggleable-power:
    title: Toggleable Power
    text: |
        If you want a custom power that you can toggle, you'll have to use more than one custom power; one of power type ["Toggle"; `origins:toggle`](https://origins.readthedocs.io/en/latest/types/power_types/toggle/) and the other power your custom power type, with the condition ["Power Active"; `origins:power_active`](https://origins.readthedocs.io/en/latest/types/entity_condition_types/power_active/) that points to the toggle power. You can set the "Toggle" power's "Hidden" field to true (or check it) to hide it, or combine the two powers in a [multiple power type](#multiple-power).

        Example multiple power with togglability [JSON](#json-format) (this power has id "mypack:radar"):
        ```json
        {
            "name": "Radar",
            "description": "Causes moving entities to glow. Can be toggled.",
            "type": "origins:multiple",

            "toggle": {
                "type": "origins:toggle",
                "key": {
                  "key": "key.origins.primary_active"
                }
            },
            "glow": {
                "condition": {
                    "type": "origins:power_active",
                    "power": "mypack:radar_toggle"
                },

                "type": "origins:entity_glow",
                "entity_condition": {
                    "type": "origins:moving"
                }
            }
        }
        ```

pehkui-power:
    title: Pehkui
    text: |
        If you're not super adept at making powers or origins, do NOT make a power using pehkui. You are going to confuse yourself and your brain will explode. Really familiar yourself with simpler concepts first. If you're more comfortable with making origins, then you can continue on this page.

        Modifying your player size is one of the most common things that requires that you install Pehkui mod in addition to the origins mod, but pehkui can be used to modify your mining speed, block reach, and other things with the player as well. You can get [the Pehkui mod here (click)](https://www.curseforge.com/minecraft/mc-mods/pehkui).

        The main way to modify player size or other pehkui attributes is to use an "action" power type and run pehkui commands through entity actions. Most likely, you'll want to use the [`origins:action_on_callback`](https://origins.readthedocs.io/en/latest/types/power_types/action_on_callback/) power type in combination with the [`origins:execute_command`](https://origins.readthedocs.io/en/latest/types/entity_action_types/execute_command/) entity action. You'll want to test how the command works in-game and also test the variety of entity actions that exist already. There's an example power below.

        If you just want to modify player size, you could also install the Extra Origins mod and use the custom `extraorigins:modify_size` power type it provides instead. [Here's one example (click here)](https://github.com/MoriyaShiine/extra-origins/blob/master/src/main/resources/data/extraorigins/powers/bite_sized.json#L4) of that power type in use. If you're using the Origin Creator, you can use the "custom" option in any drop down where it normally says "single" or "multiple" and type in `extraorigins:modify_size` for the power type yourself.

        Example 65% size power [JSON](#json-format) (courtesy of LuaDotExe):
        ```json
        {
            "type": "origins:action_on_callback",
            "entity_action_chosen": {
                "type": "origins:and",
                "actions": [
                    {
                      "type": "origins:execute_command",
                      "command": "scale set pehkui:height 0.65 @s"
                    },
                    {
                      "type": "origins:execute_command",
                      "command": "scale set pehkui:width 0.65 @s"
                    },
                    {
                      "type": "origins:execute_command",
                      "command": "scale persist set true @s"
                    }
                ]
            },
            "entity_action_lost": {
                "type": "origins:execute_command",
                "command": "scale reset @s"
            },

            "name": "Smol",
            "description": "You're 65% normal size!"
        }
        ```

attribute-power:
    title: Attribute
    text: |
        The [Attribute `origins:attribute` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/attribute/) power type gives/takes away certain numeric values (e.g. max-health/armor/speed) from its user. Note that if you want [a condition](#power-conditions) on this power type, you must use the [Conditioned Attribute `origins:conditioned_attribute` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/conditioned_attribute/) power type instead.

        This power can provide multiple `modifiers` at once in a list, or just a single `modifier` only. Every modifier takes an "attribute" name (specifying what to modify), an "operation" (specifying how to modify), and a value (specifying how much to modify by).

        Common attribute names ([for full list click here](https://minecraft.fandom.com/wiki/Attribute)) are:

        - `generic.max_health` - maximum health in half hearts. Normally 20.0.
        - `generic.knockback_resistance` - the percentage number of knockback that's ignored (1.0 is 100% or no knockback, 0.5 is 50% or half knockback)
        - `generic.movement_speed` - speed of movement; for players, multiply by about 43 for blocks/second (1 block/s is about 0.023). It's recommended you modify this with a multiply operation.
        - `generic.attack_damage` - attack damage in half hearts.
        - `generic.armor` - armor points (20 for full diamond armor)
        - `generic.armor_toughness` - [armor toughness](https://minecraft.fandom.com/wiki/Armor#Armor_toughness) (8 for diamond armor, 12 for netherite)
        - `generic.attack_knockback` - knockback done by attacks
        - `generic.attack_speed` - number of full strength attacks per second. Defaults to 4.0 with a fist. Other weapons set this value directly.
        - `generic.luck` - "improves" loot from loot tables (some items become more likely to appear); in vanilla, this only applies to fishing. Defaults to 0.0 (meaning multiply operations don't work). This number has nothing to do with a percentage; each level of the status effect luck adds 1.0 to this attribute.

        As for the operation, you only need to know that `addition` adds/subtracts a raw number to the value, and `multiply_base` adds/subtracts a percentage, and all `addition` modifiers occur before `multiply_base` modifiers. Use `addition` when you have a clear number of something (e.g., number of half hearts, armor points, knockback resistance, etc), and `multiply_base` when you don't have a clear number (movement speed).

        A value of 2.5 for `addition` in `generic.max_health` adds a heart and a quarter, while with `generic.knockback_resistance` it adds 2.5%. With `generic.movement_speed`, it adds about 108 blocks/second (2.5*43 is about 108).
        
        A value of 0.5 for `multiply_base` in `generic.max_health` multiplies your health by 1.5x (5 hearts normally), while with `generic.knockback_resistance` it adds nothing (1.5 times no knockback resistance by default is 0). With `generic.movement_speed`, it multiplies your movement speed by 1.5x.

        If you really want to know, `multiply_total` is the same as `multiply_base`, but percentages stack with each other. So while `multiply_base` values of 0.2 (+20% each) would only yield a net result of 0.4 (+40%), two `multiply_total` values of 0.2 (20%) would stack and yield a net result of 0.44 (+44%). There's a bonus 4% (which is 20% of 20%).

        If you're updating `generic.max_health`, there is an additional field called `update_health` for this power that defaults to be true (on). If you set it to false (off), the player's health percentage will not be preserved to the new maximum health. For example, imagine the user has 5 hearts remaining and their max health changes from 10 hearts to 20. If true (default), their health will change to 10 hearts (to preserve 50%). If false, their health will remain at 5 hearts.

        If you want more control over the modifier operation or what to modify something else, the [Modify Attribute power type (click here to learn more about modify powers)](#modify-power) provides many more operators and things to modify.

        Example attribute power [JSON](#json-format):
        ```json
        {
            "name": "Dragon Scales",
            "description": "Your skin is tough and you have diamond armor naturally.",
            "type": "origins:attribute",
            "modifiers": [
                {
                    "attribute": "minecraft:generic.armor",
                    "value": 20,
                    "operation": "addition"
                },
                {
                    "attribute": "minecraft:generic.armor_toughness",
                    "value": 8,
                    "operation": "addition"
                }
            ]
        }
        ```

status-effect-power:
    title: Status Effect
    text: |
        If you simply want a constant status effect that remains permanent even after the user drinks milk, you can use the [Action Over Time `origins:action_over_time`](https://origins.readthedocs.io/en/latest/types/power_types/action_over_time/) power type (that runs an action every so many ticks) instead with the "Entity Action" being an [Apply Effect](#effect-action) action containing the status effect you want. If you want the power to instantly remove the status effect when it deactivates (its [condition](#power-conditions) becomes false), set the "Falling Action" to a [Clear Effect](#effect-action) action containing the status effect to remove.

        Otherwise, the [Stacking Status Effect `origins:stacking_status_effect` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/stacking_status_effect/) power type is a typical way to apply a status effect that increases its duration (not its amplifier) over time as the power remains active.

        The Stacking Status Effect works with the concept of "stacks". While the power is active/inactive ([condition](#power-conditions) is true/false), the user gains/loses a stack respectively every so many ticks (determined by the "Tick Rate"). The amount of stacks starts at 0, but increases/decreases until hitting the Max-Stacks/Min-Stacks values respectively. Note that "Min Stacks" can be negative to provide a "buffer" before the status effect is applied. Every time a stack is added (not when a stack is removed) the status effect is reapplied with a duration (in ticks, 20 ticks is a second) equal to `number of stacks * Duration Per Stack`. If the user already has the status effect with a greater duration than what would be applied, the status effect remains the same.

        If you need more control over how and when the status effect is applied, as well as increases or decreases (e.g., you would like the amplifier to increase over time), you'll probably have to use a [Resource (click to learn more)](#resource-power) in combination with several [Action Over Time `origins:action_over_time`](https://origins.readthedocs.io/en/latest/types/power_types/action_over_time/) powers instead. Note that actions can have individual conditions too with [`origins:if_else` and `origins:if_else_list` (click to learn about meta actions)](https://origins.readthedocs.io/en/latest/types/meta_action_types/).

        Example constant status effect power [JSON](#json-format):
        ```json
        {
            "name": "Regenerative Soul",
            "description": "Permanent regeneration",
            "type": "origins:action_over_time",
            "interval": 20,
            "entity_action": {
                "type": "origins:apply_effect",
                "effect": {
                    "effect": "minecraft:regeneration",
                    "duration": 100,
                    "amplifier": 0,
                    "show_particles": true,
                    "show_icon": true
                }
            }
        }
        ```

night-vision-power:
    title: Night Vision
    text: |
        The [Night Vision `origins:night_vision` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/night_vision/) power type grants night vision to its owner without giving them the status effect.

        It also has a `strength` field that can range from 0.0-1.0 that specifies how strong the night vision effect is, which defaults to 1.0. As you can imagine, a value of 0.0 does nothing, while a value of 1.0 gives full night vision.

        This specific power (though not any other power types) also has a [Toggle Night Vision](https://origins.readthedocs.io/en/latest/types/power_types/toggle_night_vision/) variant that allows its owner to enable or disable the effects of night vision with a keybind.

        Example night vision power [JSON](#json-format):
        ```json
        {
            "name": "Above Average Eyes",
            "description": "It's slightly easier for you to see in the dark.",
            "type": "origins:night_vision",
            "strength": 0.5
        }
        ```

mob-hostility-power:
    title: Mob Hostility
    text: |
        Unfortunately, there is currently no power type in the base game to change whether or not mobs are hostile towards the player. However, there are options if you allow the use of addons.

        If you allow yourself to use addon mods, here are some options:
        1. [Apugli](https://www.curseforge.com/minecraft/mc-mods/apugli) has the [Mobs Ignore `apugli:mobs_ignore`](https://apugli.readthedocs.io/en/latest/types/power_types/mobs_ignore/) power type which causes certain mobs to ignore the player.
        2. [Robin's Apoli Additions'](https://www.curseforge.com/minecraft/mc-mods/robins-apoli-additions) has the [Remove Goal `ra_additions:remove_goal`] power type, which when on a _mob_, allows you to prevent the mob from performing actions on a more granular level. This should be on the _mob_, not the player, so you'd have to grant the power to said mob.
        
        The closest thing you have in regular old origins is the `origins:scare_creepers` power, which is a _power_ and not a _power type_, meaning it can only be added to origins directly and not configured. You can also try vaguely related power types or powers that involve command/function usage, like giving mobs blindness to lower their follow radius, shoving them away, giving them the `{NoAI:1b}` NBT tag, or teleporting an invisible cat around to scare creepers.

        There are two other main workarounds in base origins, you could either:
        1. Interface with mob hostility directly via mixins with an origins addon mod (make a mod instead of a datapack).
        2. Make a power which adds the mob to your own "team" via the [`/team`](https://minecraft.fandom.com/wiki/Commands/team) command. Mobs will not attack the player if they are on the same team as the player. However, all entities can only ever be on ONE team at a time, so using this method could conflict with other packs that use teams.

creative-flight-power:
    title: Creative Flight
    text: |
        The [Creative Flight `origins:creative_flight` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/creative_flight/) power type grants the ability to fly as if its owner was in creative mode.

        Example creative flight power [JSON](#json-format):
        ```json
        {
            "name": "Fly",
            "description": "Fly",
            "type": "origins:creative_flight"
        }
        ```

elytra-flight-power:
    title: Elytra Flight
    text: |
        The [Elytra Flight `origins:elytra_flight` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/elytra_flight/) power type grants the ability to fly as if an elytra was equipped.

        There is also a `render_elytra` field that must be either set to `true` (an elytra should be shown), or `false` (no elytra will be shown).

        Optionally, a `texture_location` field can be provided to retexture the elytra wings to any custom texture provided via minecraft or a resource pack.

        Example elytra flight power [JSON](#json-format):
        ```json
        {
            "name": "Bug wings",
            "description": "You have wings like a bug that let you fly.",
            "type": "origins:elytra_flight",
            "render_elytra": true,
            "texture_location": "minecraft:textures/entity/elytra.png"
        }
        ```

effect-immunity-power:
    title: Effect Immunity
    text: |
        The [Effect Immunity `origins:effect_immunity` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/effect_immunity/) power type prevents certain status effects from being applied to its owner.

        The effects to prevent can be provided in the `effect` (singular) or `effects` (plural) fields. To turn the list of effects into a whitelist instead of a blacklist (i.e., `effect` and `effects` would specify the only effects that should not be blocked), set the `inverted` field to true.

        Example effect immunity power to weakness and strength [JSON](#json-format):
        ```json
        {
            "type": "origins:effect_immunity",
            "effects": [
                "minecraft:weakness",
                "minecraft:strength"
            ]
        }
        ```

fire-immunity-power:
    title: Fire Immunity
    text: |
        The [Fire Immunity `origins:fire_immunity` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/fire_immunity/) power type prevents its owner from being set on fire and from taking any fire damage.

        Example fire immunity power [JSON](#json-format):
        ```json
        {
            "name": "Fireborn",
            "description": "You take no damage from fire sources",
            "type": "origins:fire_immunity"
        }
        ```

projectile-power:
    title: Projectile
    text: |
        The [Fire Projectile `origins:fire_projectile` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/fire_projectile/) power type enables its owner to fire a projectile upon a key press.

        The entity fired can be configured via the `entity_type` field. [A full list of entity ids can be found here](https://minecraft.fandom.com/wiki/Java_Edition_data_values/Entities), but notable ones are in the "Projectiles" section of that page. NBT can be given to the entity via the `tag` field.

        The number of entities fired is configurable via the `count` field which defaults to 1.

        The `key` field specifies what key this power should respond to. By default, this is the primary key (G). A `cooldown` in ticks can be provided to cause the power to need to recharge on use; this is rendered into a resource bar on the hud, but can be turned off by setting the `hud_render`s `should_render` field to false.

        A full list of fields available and their functions can be found on the [Fire Projectile](https://origins.readthedocs.io/en/latest/types/power_types/fire_projectile/) page of the wiki.

        Example power that fires arrows rapidly while holding left click [JSON](#json-format)
        ```json
        {
            "type": "origins:fire_projectile",
            "entity_type": "minecraft:arrow",
            "cooldown": 2,
            "hud_render": {
                "should_render": false
            },
            "tag": "{pickup:0b}",
            "key": {
                "key": "key.attack",
                "continuous": true
            }
        }
        ```

        TODO - Research the fields' impact on projectile motion

inventory-power:
    title: Inventory
    text: |
        The [Inventory `origins:inventory` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/inventory/) power type gives its owner a separate inventory, like a backpack, that can be used to store items.

        The type of inventory is configurable via the `container_type` field, and can be set to one of "chest", "hopper", "dropper", "dispenser", or "double_chest". The "chest" has 3 rows of 9 slots (27), hopper has 1 row of 5 slots (5), the "dropper" and "dispenser" have 3 rows of 3 slots (9), and the "double_chest" as 6 rows of 9 slots (54). There is no noticable difference between "dropper" and "dispenser".

        The `key` field specifies what key this power should respond to. By default, this is the primary key (G).

        The `title` field can be optionally given literal text or a translation key that shows up at the top of the inventory. It defaults to `container.inventory`, which translates to "Inventory" in English.

        The `drop_on_death` field, if set to true (defaults to false), will cause all items in the inventory to drop on death. The `drop_on_death_filter` field allows using an [Item Condition](https://origins.readthedocs.io/en/latest/types/item_condition_types/), which allows specifying which items will drop; items not matching the condition will not drop on death. Like other conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used here as well.

        Hopper-like inventory that opens on secondary button press [JSON](#json-format)
        ```json
        {
            "type": "origins:inventory",
            "container_type": "hopper",
            "drop_on_death": false,
            "key": {
                "key": "key.origins.secondary_active"
            }
        }
        ```

invisibility-power:
    title: Invisibility
    text: |
        The [Invisibility `origins:invisibility` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/invisibility/) power type grants its owner invisibility.

        By default, armor and the glowing outline are not rendered on entities with this power. Set `render_armor` to true to render armor, and set `render_outline` to show any glowing outline.

        Example Invisibility power when not burning that doesn't prevent glowing [JSON](#json-format):
        ```json
        {
            "type": "origins:invisibility",
            "render_outline": true,
            "condition": {
                "type": "origins:on_fire",
                "inverted": true
            }
        }
        ```

invulnerability-power:
    title: Invulnerability
    text: |
        The [Invulnerability `origins:invulnerability` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/invulnerability/) power type grants its owner damage immunity to certain damage sources.

        You can specify which type of damage the player is immune to using a [Damage Condition](https://origins.readthedocs.io/en/latest/types/damage_condition_types/) (`damage_condition` field). Like other conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used here as well.

        This power type does not support the [Amount (Damage Condition)](https://origins.readthedocs.io/en/latest/types/damage_condition_types/amount/). If that specific damage condition is needed, use the [Modify Damage Taken (Power Type)](#modify-power) with `operation` set to `multiply_total` and `value` set to `-1`.

        Invulerability to fall damage power [JSON](#json-format):
        ```json
        {
            "type": "origins:invulnerability",
            "damage_condition": {
                "type": "origins:name",
                "name": "fall"
            }
        }
        ```

keep-inventory-power:
    title: Keep Inventory
    text: |
        The [Keep Inventory `origins:keep_inventory` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/keep_inventory/) power type makes certain items persist in its owner's inventory after death.

        By default, all items in the owner's inventory will remain after death. An [Item Condition](https://origins.readthedocs.io/en/latest/types/item_condition_types/) (`item_condition` field), can be provided specifying which items will persist in the owner's inventory. Like other conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used here as well.

        Optionally, the `slots` field can be given a list of numberical slots to preserve items in; other slots will drop items.

        Power which applies makes items in the hotbar persist beyond death [JSON](#json-format):
        ```json
        {
            "type": "origins:keep_inventory",
            "slots": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ]
        }
        ```

launch-power:
    title: Launch
    text: |
        The [Launch `origins:launch`](https://origins.readthedocs.io/en/latest/types/power_types/launch/) power type launches its owner upwards when pressing a certain key.

        The `speed` field must be set with a float value specifying how fast to launch the owner into the air. The higher this value, the higher the owner will go.

        The `key` field specifies what key this power should respond to. By default, this is the primary key (G). A `cooldown` in ticks can be provided to cause the power to need to recharge on use; this is rendered into a resource bar on the hud, but can be turned off by setting the `hud_render`s `should_render` field to false.

        Optionally, a sound event can be played via the `sound` field. A full list of sound effects [can be found here](https://www.digminecraft.com/lists/sound_list_pc.php). If you want more detail on each sound, you can find it [on this list instead](https://minecraft.fandom.com/wiki/Sounds.json/Java_Edition_values).

        Example launch power which plays a sound and has a cooldown of 30 seconds [JSON](#json-format):
        ```json
        {
            "type": "origins:launch",
            "cooldown": 600,
            "hud_render": {
                "bar_index": 4
            },
            "sound": "minecraft:entity.parrot.fly",
            "speed": 2,
            "key": {
                "key": "key.origins.primary_active",
                "continuous": true
            }
        }
        ```

        TODO - Research the speed field's impact on projectile motion

loot-table-power:
    title: Loot Table
    text: |
        The [Replace Loot Table `origins:replace_loot_table` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/replace_loot_table/) power type changes one or more loot tables that its owner uses when breaking blocks, killing mobs, fishing, opening chests, etc.

        The `replace` field requires an object with `"key": "value"` pairs. Each "key" is a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) matching all loot tables to replace, and each "value" is the loot table to replace all matches with.

        In case multiple powers want to replace a loot table, the power with the highest `priority` (default to 0) will "win" and it will successfully replace the table while the other powers will be ignored (TODO - Verify this). If multiple powers with the same priority try to do the replacement, the power that successfully "wins" is undefined (unknowable normally, but not necessarily random).

        A [Bientity Condition](https://origins.readthedocs.io/en/latest/types/bientity_action_types/), [Block Condition](https://origins.readthedocs.io/en/latest/types/block_condition_types/), and an [Item Condition](https://origins.readthedocs.io/en/latest/types/item_condition_types/) can all be used to determine when to apply the loot table replacement. As with regular conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used in place of all conditions too.

        Here's a table explaining what entities, blocks, and items are tested for each loot table type:

        TODO - Look at [Replace Loot Table](https://origins.readthedocs.io/en/latest/types/power_types/replace_loot_table/) page on the origins wiki to determine actor and target, and the [loot context types](https://minecraft.fandom.com/wiki/Loot_table#Loot_context_types) section on the minecraft wiki.

        For [JSON](#json-format) examples, see the [Replace Loot Table](https://origins.readthedocs.io/en/latest/types/power_types/replace_loot_table/) wiki page.

        TODO - Regular expressions page.

restrict-armor-power:
    title: Restrict Armor
    text: |
        The [Restrict Armor `origins:restrict_armor` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/restrict_armor/) power type prevents its owner from wearing certain armor. Note that if you want [an entity condition](#power-conditions) on this power type, you must use the [Conditioned Restrict Armor `origins:conditioned_restrict_armor` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/conditioned_restrict_armor/) power type instead.

        You can specify which items are restricted from being worn via [Item Conditions](https://origins.readthedocs.io/en/latest/types/item_condition_types/). Like other conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used as well. If the condition matches the item, then the item will be unwearable.

        Here's a table showing the armor level (x) and toughness (+x) of each piece of armor:

        <table>
            <tr><th>Material</th> <th colspan=2>Head</th> <th colspan=2>Chest</th> <th colspan=2>Legs</th> <th colspan=2>Feet</th></tr>
            <tr><th>Turtle Shell</th>   <td>2</td><td>+0</td><td> </td><td>  </td><td> </td><td>  </td><td> </td><td>  </td></tr>
            <tr><th>Leather</th>        <td>1</td><td>+0</td><td>3</td><td>+0</td><td>2</td><td>+0</td><td>1</td><td>+0</td></tr>
            <tr><th>Gold</th>           <td>2</td><td>+0</td><td>5</td><td>+0</td><td>3</td><td>+0</td><td>1</td><td>+0</td></tr>
            <tr><th>Chainmail</th>      <td>2</td><td>+0</td><td>5</td><td>+0</td><td>4</td><td>+0</td><td>1</td><td>+0</td></tr>
            <tr><th>Iron</th>           <td>2</td><td>+0</td><td>6</td><td>+0</td><td>5</td><td>+0</td><td>2</td><td>+0</td></tr>
            <tr><th>Diamond</th>        <td>3</td><td>+2</td><td>8</td><td>+2</td><td>6</td><td>+2</td><td>3</td><td>+2</td></tr>
            <tr><th>Netherite</th>      <td>3</td><td>+3</td><td>8</td><td>+3</td><td>6</td><td>+3</td><td>3</td><td>+3</td></tr>
        </table>

        Example power which prevents equipping any armor better than chainmail [JSON](#json-format):
        ```json
        {
            "type": "origins:restrict_armor",
            "head": {
                "type": "origins:armor_value",
                "comparison": ">",
                "compare_to": 2
            },
            "chest": {
                "type": "origins:armor_value",
                "comparison": ">",
                "compare_to": 5
            },
            "legs": {
                "type": "origins:armor_value",
                "comparison": ">",
                "compare_to": 4
            },
            "feet": {
                "type": "origins:armor_value",
                "comparison": ">",
                "compare_to": 1
            }
        }
        ```

resource-power:
    title: Resources
    text: |
        The [Resource `origins:resource` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/resource/) power type provides an integer variable with a minimum (`min` field) and maximum (`max` field) value that can be used for a variety of purposes. The starting value of a resource can be set with the `start_value` field, otherwise it will default to the `min` value.
        
        Resources can be changed via the [Change Resource (Entity Action)](https://origins.readthedocs.io/en/latest/types/entity_action_types/change_resource/) and checked via the [Resource (Entity Condition)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/resource/).

        Resources can also optionally appear as a colored bar on their owner's HUD via the `hud_render` field, which takes a [HUD Render object](https://origins.readthedocs.io/en/latest/types/data_types/hud_render/) as its value.

        You can also set the `min_action` and `max_action` fields to entity actions that will be executed when the resource reaches its minimum and maximum values respectively, from any means.

        Resources are fairly complex and it is recommended you look at example packs and experiment on them yourself to figure out how they work more fully.

        Example multi-power (id mypack:water) using a resource to display whether the user is in water or not [JSON](#json-format):
        ```json
        {
            "name": "Watery Display",
            "description": "Displays if in water or not.",
            "type": "origins:multiple",
            "resource": {
                "type": "origins:resource",
                "min": 0,
                "max": 1,
                "start_value": 0,
                "hud_render": {
                    "should_render": true,
                    "bar_index": 1
                }
            },
            "set": {
                "condition": {
                    "type": "origins:fluid_height",
                    "fluid": "minecraft:water",
                    "comparison": ">",
                    "compare_to": 0
                },
                "type": "origins:action_over_time",
                "interval": 5,
                "rising_action": {
                    "type": "origins:change_resource",
                    "resource": "my_pack:test_resource",
                    "change": 1,
                    "operation": "set"
                },
                "falling_action": {
                    "type": "origins:change_resource",
                    "resource": "my_pack:test_resource",
                    "change": 0,
                    "operation": "set"
                }
            }
        }
        ```

other-power:
    title: Other
    text: |
        A full list of power types can be found on [the official wiki](https://origins.readthedocs.io/en/latest/types/power_types/). You should also try looking at the [Action Power Types](#action-power), [Prevent Power Types](#prevent-power), and [Modify Power Types](#modify-power) to see if any of those have what you want, and consider that a Minecraft command/function may be able to work in conjuction with your power to provide the functionality you desire.

        If none of the power types listed on there provide the functionality you need, there is a very real possibility there is NO power that does what you want in base origins. However, an addon mod might provide the functionality you need. Here are three great addon mods:
        - [Apugli](https://www.curseforge.com/minecraft/mc-mods/apugli) - [Wiki](https://apugli.readthedocs.io/en/latest/)
        - [Robin's Apoli Additions'](https://www.curseforge.com/minecraft/mc-mods/robins-apoli-additions) - [Wiki](https://raa-docs.readthedocs.io/en/latest/)
        - [Extra Origins](https://legacy.curseforge.com/minecraft/mc-mods/extra-origins) - [Wiki](https://github.com/MoriyaShiine/extra-origins/wiki)

        You can find more addons in the `#addons` channel in the [official Origins Discord](https://discord.gg/4mTMHu3), or by [viewing dependants on CurseForge](https://legacy.curseforge.com/minecraft/mc-mods/origins/relations/dependents?filter-related-dependents=3).
        
        You can also suggest a power in the `#suggestions` channel in the [official Origins Discord](https://discord.gg/4mTMHu3), or perhaps just write the code for the power yourself in an addon.



area-action:
    title: Area Action
    text: |
        Sometimes you don't want to execute an entity action on the main player or entity, but a certain entity nearby. There are a few actions that can help with this, and they all involve the use of [Bientity Conditions](https://origins.readthedocs.io/en/latest/types/bientity_action_types/) and [Bientity Actions](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/). These are special conditions and actions that work on a pair of entities called the "actor" and a "target". The entities in each category depend on the action being used, but generally the "actor" is the entity executing the action (who has the power), and the "target" is an entity being targeted. The "actor" and "target" can be swapped using the [Invert `origins:invert` (Condition)](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/invert/) or the [Invert `origins:invert` (Action)](https://origins.readthedocs.io/en/latest/types/bientity_action_types/invert/).

        As with regular conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used in place of bientity conditions too.
        
        If you want to execute regular conditions or actions on either, use the [Actor Action `origins:actor_action`](https://origins.readthedocs.io/en/latest/types/bientity_action_types/actor_action/), [Target Action `origins:target_action`](https://origins.readthedocs.io/en/latest/types/bientity_action_types/target_action/), [Actor Condition `origins:actor_condition`](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/actor_condition/), or [Target Condition `origins:target_condition`](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/target_condition/) types.

        The [Area of Effect `origins:area_of_effect` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/area_of_effect/) entity action executes a bi-entity action with the executor being the "actor" and nearby entities being the "target"s. Use `radius` to set a radius of blocks to work in (defaults to 10), `bientity_condition` to restrict which entities are affected, and `bientity_action` to specify an action to perform.

        The [Riding Action `origins:riding_action` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/riding_action/) entity action executes a bi-entity action with the executor being the "actor" and any entities being ridden being the "target". Use `recursive` to set whether or not any entities being ridden indirectly will be targeted (defaults to false), `bientity_condition` to restrict which entities are affected, and `bientity_action` to specify an action to perform.

        The [Passenger Action `origins:passenger_action` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/passenger_action/) entity action executes a bi-entity action with the executor being the "actor" and any entities being riding the actor being the "target". Use `recursive` to set whether or not any entities riding the actor indirectly will be targeted (defaults to false), `bientity_condition` to restrict which entities are affected, and `bientity_action` to specify an action to perform.

        There is also the [Raycast `origins:raycast` (click here for more info)](#raycast-action) entity action which casts a ray in the direction the "actor" entity is looking until it hits a block or entity, known as the "target". The Raycast action is very complex and thus it has its own page in this flow help.

        Example area of effect action [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:area_of_effect",
            "radius": 32,
            "bientity_action": {
                "type": "origins:target_action",
                "action": {
                    "type": "origins:set_on_fire",
                    "duration": 5
                }
            },
            "bientity_condition": {
                "type": "origins:can_see"
            }
        }
        ```
        This example will set entities within a 32 block radius on fire for 5 seconds if the entities that are within the radius can be "seen" by the entity that invoked the action.

raycast-action:
    title: Raycast Action
    text: |
        The [Raycast `origins:raycast` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/raycast/) entity action casts a ray in the direction the "actor" entity is looking until it hits a block or entity, known as the "target".

        TODO

velocity-action:
    title: Velocity Action
    text: |
        The [Add Velocity `origins:add_velocity` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/) entity action adds to or sets the entity's velocity.

        TODO

xp-action:
    title: XP Action
    text: |
        The [Add XP `origins:add_xp` (click here for more info)](hhttps://origins.readthedocs.io/en/latest/types/entity_action_types/add_xp/) entity action adds experience points or levels to the entity.

        TODO

block-action:
    title: Block Action
    text: |
        The [Block Action At `origins:block_action_at` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/block_action_at/) entity action executes a block action at the position of the entity.

        TODO

effect-action:
    title: Effect Action
    text: |
        The [Apply Effect `origins:apply_effect` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/apply_effect/) entity action applies one or more status effects to the entity.

        The [Clear Effect `origins:clear_effect` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/clear_effect/) entity action clears all or just one status effect from the entity.

        TODO

health-action:
    title: Health Action
    text: |
        The [Heal `origins:heal` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/heal/) entity action heals the entity by a certain amount of half hearts (`amount` field). Healing by 20 would set the user to full health (10 hearts) normally.

        The [Damage `origins:damage` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/damage/) entity action damages the entity by a certain amount of half hearts (`amount` field). Damaging by 10 hearts will take away half of the health bar (5 hearts) normally.

        The Damage entity action also allows for a `source` field, which when given a [Damage Source object](https://origins.readthedocs.io/en/latest/types/data_types/damage_source/), controls how the damage is applied - i.e., by changing the death message, damage type, whether armor is bypassed, etc.

        Example fire damage action [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:damage",
            "amount": 4,
            "source": {
                "name": "onFire",
                "fire": true,
                "bypasses_armor": true
            }
        }
        ```
        This does 2 hearts of `onFire` damage - considered fire damage - that bypasses armor.

open-inventory-action:
    title: Open Inventory Action
    text: |
        The [Crafting Table `origins:crafting_table` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/crafting_table/) entity action opens the crafting table GUI for the entity as if they right clicked a crafting table.

        The [Ender Chest `origins:ender_chest` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/ender_chest/) entity action opens the ender chest GUI for the entity as if they right clicked an ender chest.

        Example power which opens the ender chest on key press [JSON](#json-format):
        ```json
        {
            "type": "origins:active_self",
            "entity_action": {
                "type": "origins:ender_chest"
            },
            "key": {
                "key": "key.origins.primary_active"
            }
        }
        ```

inventory-action:
    title: Inventory Action
    text: |
        There are several entity actions that interact with the items in a player/entity's inventory. Most of these actions work based upon [Item Actions](https://origins.readthedocs.io/en/latest/types/item_action_types/), and items effected can be restricted via the use of [Item Conditions](https://origins.readthedocs.io/en/latest/types/item_condition_types/). As with regular conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used too.

        The [Give `origins:give` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/give/) entity action gives an entity an item stack by inserting it into their inventory or dropping it on the ground if there is no available inventory space. The [Item Stack](https://origins.readthedocs.io/en/latest/types/data_types/item_stack/) given is configurable through the `stack` field. You can optionally provide an `item_action` to change the item stack before it is given, or specify a preferred equipment slot for the item to go with the `preferred_slot` field (Accepts one of: "chest", "feet", "head", "legs", "mainhand", or "offhand").

        The [Equipped Item Action `origins:equipped_item_action` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/equipped_item_action/) entity action executes an `item_action` on the item in one equipped item slot (`equipment_slot` field). The slot is one of: "mainhand", "offhand", "head", "chest", "legs", or "feet".

        The [Drop Inventory `origins:drop_inventory` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/drop_inventory/) entity action drops certain items from the player's main inventory or power-based inventory. The amount of items dropped, slots dropped from, inventories are dropped from, item types dropped, and how items are dropped can all be configured via various fields present on the power. Notably the `item_condition` field can be used to restrict which items are dropped.

        The [Modify Inventory `origins:modify_inventory` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/modify_inventory/) entity action uses an `item_action` to modify certain items specified by the `item_condition` field. More fields are available to configure the slots and inventories the modification occurs in.

        The [Replace Inventory `origins:replace_inventory` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/replace_inventory/) entity action replaces the items specified by the `item_condition` field with a given [Item Stack](https://origins.readthedocs.io/en/latest/types/data_types/item_stack/) (`stack` field). An `item_action` can be provided to modify the stack after replacement. More fields are available to configure the slots and inventories the replacement occurs in.

        Entity action which gives 3 eggs [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:give",
            "stack": {
                "item": "minecraft:egg",
                "amount": 3
            }
        }
        ```

        Entity action that damages all armor value items [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:modify_inventory",
            "item_condition": {
                "type": "origins:armor_value",
                "comparison": ">",
                "compare_to": 0
            },
            "item_action": {
                "type": "origins:damage",
                "amount": 1,
                "ignore_unbreaking": true
            }
        }
        ```

sound-action:
    title: Sound Action
    text: |
        The [Play Sound `origins:play_sound` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/play_sound/) entity action plays a sound event at the entity's position.

        The sound played is specified by the `sound` field. A full list of sound effects [can be found here](https://www.digminecraft.com/lists/sound_list_pc.php). If you want more detail on each sound, you can find it [on this list instead](https://minecraft.fandom.com/wiki/Sounds.json/Java_Edition_values).

        The `volume` field controls the number of blocks the sound can be heard from. A value of 1.0 means 16 blocks, 0.5 means 8 blocks, 3.0 means 48 blocks, etc. It defaults to 1.0 or 16 blocks.

        The `pitch` field controls the pitch of the sound event by multiplying it's frequency. It ranges from 0.0 to 2.0 and defaults to 1.0. 1.0 means no pitch change, 0.5 means one octave lower, 2.0 means one octave higher, and 0.25 means two octaves lower.
        
        For note block sounds, the default sound is F#4. Here's a table showing the frequencies of note block sounds (based on both equal temprament and a form of just intonation on F#):

        <table>
            <tr><th>Note</th><th>Equal Pitch</th><th>Just Pitch</th>    <th>Note</th><th>Equal Pitch</th><th>Just Pitch</th></tr>
            <tr><td>F#3</td><td>0.500000</td><td>0.5000 (1/2)</td>      <td>F#4</td><td>1.000000</td><td>1.0000 (1/1)</td></tr>
            <tr><td>G3 </td><td>0.529732</td><td>0.5333 (8/15)</td>     <td>G4 </td><td>1.059463</td><td>1.0667 (16/15)</td></tr>
            <tr><td>G#3</td><td>0.561231</td><td>0.5625 (9/16)</td>     <td>G#4</td><td>1.122462</td><td>1.1250 (9/8)</td></tr>
            <tr><td>A3 </td><td>0.594604</td><td>0.6000 (3/5)</td>      <td>A4 </td><td>1.189207</td><td>1.2000 (6/5)</td></tr>
            <tr><td>A#3</td><td>0.629961</td><td>0.6250 (5/8)</td>      <td>A#4</td><td>1.259921</td><td>1.2500 (5/4)</td></tr>
            <tr><td>B3 </td><td>0.667420</td><td>0.6667 (2/3)</td>      <td>B4 </td><td>1.334840</td><td>1.3333 (4/3)</td></tr>
            <tr><td>C4 </td><td>0.707107</td><td>0.7000 (7/10)</td>     <td>C5 </td><td>1.414214</td><td>1.4000 (7/5)</td></tr>
            <tr><td>C#4</td><td>0.749154</td><td>0.7500 (3/4)</td>      <td>C#5</td><td>1.498307</td><td>1.5000 (3/2)</td></tr>
            <tr><td>D4 </td><td>0.793701</td><td>0.8000 (4/5)</td>      <td>D5 </td><td>1.587401</td><td>1.6000 (8/5)</td></tr>
            <tr><td>D#4</td><td>0.840896</td><td>0.0000 (5/6)</td>      <td>D#5</td><td>1.681793</td><td>1.6667 (5/3)</td></tr>
            <tr><td>E4 </td><td>0.890899</td><td>0.9000 (9/10)</td>     <td>E5 </td><td>1.781797</td><td>1.8000 (9/5)</td></tr>
            <tr><td>F4 </td><td>0.943874</td><td>0.0000 (15/16)</td>    <td>F5 </td><td>1.887749</td><td>1.8750 (15/8)</td></tr>
            <tr><td>F#4</td><td>1.000000</td><td>1.0000 (1/1)</td>      <td>F#5</td><td>2.000000</td><td>2.0000 (2/1)</td></tr>
        </table>

        Entity action that plays the enderman death sound within 24 blocks [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:play_sound",
            "sound": "minecraft:entity.enderman.death",
            "volume": 1.5
        }
        ```

        Entity action that plays C5 on a note block harp [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:play_sound",
            "sound": "minecraft:block.note_block.harp",
            "pitch": 1.414214
        }
        ```

particle-action:
    title: Particle Action
    text: |
        There are two main ways to spawn particles:

        The [Spawn Particles `origins:spawn_particles` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_particles/) entity action spawns particles on the entity's position, and only allows offsetting in the y direction.

        The [`/particle`](https://minecraft.fandom.com/wiki/Commands/particle) command spawns particles at any specified position and can be run through the [Execute Command](#command-action) entity action.

        Both methods take a `particle` effect of some kind ([IDs can be found here](https://minecraft.fandom.com/wiki/Java_Edition_data_values/Particles)), a number of particles to spawn (`count` field), the `speed` the particles move/fall at, a boolean `force` specifying the range at which particles can be seen (normal or false means within 32 blocks, force or true means within 512 blocks), and a `delta`/`spread` cuboid volume to spawn the particle in.

        Entity action which spawns a redstone block particle cuboid [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:spawn_particles",
            "particle": {
                "type": "minecraft:block",
                "params": "minecraft:redstone_block"
            },
            "count": 16,
            "speed": 0.0,
            "force": true,
            "spread": {
                "x": 3.0,
                "y": 0.0,
                "z": 3.0
            }
        }
        ```

spawn-action:
    title: Spawn Action
    text: |
        The [Spawn Entity `origins:add_velocity` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_entity/) entity action spawns another entity at the position of the actor entity. The ID of the entity spawned is specified by the `entity_type` field ([This is a list of all entity IDs](https://minecraft.fandom.com/wiki/Java_Edition_data_values/Entities)). Extra NBT for that entity can be provided through the `nbt` field, and an `entity_action` can be executed on the spawned entity as well.

        For acquiring NBT data, I recommend using [`mcstacker.net`](https://mcstacker.net/).

        Entity action that spawns a no AI baby zombie holding a gold block [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:spawn_entity",
            "entity_type": "minecraft:zombie",
            "tag": "{NoAI:1b,IsBaby:1,HandItems:[{id:\"minecraft:gold_block\",Count:1},{}]}"
        }
        ```

explode-action:
    title: Explode Action
    text: |
        The [Explode `origins:explode` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/explode/) entity action summons an explosion at the entity with a specific explosion power.

        TODO

fire-action:
    title: Fire Action
    text: |
        The [Set On Fire `origins:set_on_fire` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/set_on_fire/) entity action sets the entity on fire.

        The [Extinguish `origins:extinguish` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/extinguish/) entity action extinguishes the entity if they are on fire, removing the burning effect.

        TODO

hunger-action:
    title: Hunger Action
    text: |
        These food related entity actions will only work on players.

        The [Feed `origins:feed` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/feed/) entity action fills up the _player_ entity's hunger bar as if they had eaten food.

        The [Exhaust `origins:exhaust` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/exhaust/) entity action applies exhaustion to the entity, reducing saturation and hunger.

        TODO

command-action:
    title: Command Action
    text: |
        The [Execute Command `origins:execute_command` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_action_types/execute_command/) entity action executes a command with the entity as the source (@s).

        Entity action which says hello in the chat [JSON](#json-format):
        ```json
        "entity_action": {
            "type": "origins:execute_command",
            "command": "say Hello World!"
        }
        ```

other-action:
    title: Other Action
    text: |
        A full list of entity actions can be found on [the official wiki](https://origins.readthedocs.io/en/latest/types/entity_action_types/). Remember that the [Execute Command `origins:execute_command` (click here for more info)](#command-action) is able to execute any command in the game, including functions, making it able to do things the other actions could never do.

        If none of the actions listed on there provide the functionality you need, there is a very real possibility there is NO action that does what you want in base origins. However, an addon mod might provide the functionality you need. Here are two great addon mods:
        - [Apugli](https://www.curseforge.com/minecraft/mc-mods/apugli) - [Wiki](https://apugli.readthedocs.io/en/latest/)
        - [Robin's Apoli Additions'](https://www.curseforge.com/minecraft/mc-mods/robins-apoli-additions) - [Wiki](https://raa-docs.readthedocs.io/en/latest/)

        You can find more addons in the `#addons` channel in the [official Origins Discord](https://discord.gg/4mTMHu3), or by [viewing dependants on CurseForge](https://legacy.curseforge.com/minecraft/mc-mods/origins/relations/dependents?filter-related-dependents=3).
        
        You can also suggest an action in the `#suggestions` channel in the [official Origins Discord](https://discord.gg/4mTMHu3), or perhaps just write the code for the action yourself in an addon.



biome-cond:
    title: Biome Condition
    text: |
        The [Biome `origins:biome` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/biome/) entity condition checks whether the entity is in a specified biome/biomes. The biome(s) to check for can be controlled via either the `biome` or `biomes` field.

        Optionally, a "condition" field is available that allows the checking the biome against a more complex [Biome Condition](https://origins.readthedocs.io/en/latest/types/biome_condition_types/). As with regular conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used too.

        Condition that checks if the entity is a plains biome [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:biome",
            "biome": "minecraft:plains"
        }
        ```

block-cond:
    title: Block Condition
    text: |
        Several block-related conditions exist that allow for checking nearby blocks against a [Block Condition](https://origins.readthedocs.io/en/latest/types/block_condition_types/). As with regular conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used too.

        The [Block Collision `origins:block_collision` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/block_collision/) entity condition checks a `block_condition` against a block the entity is colliding with.

        The [Block In Radius `origins:block_in_radius` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/block_in_radius/) entity condition checks if a certain number of blocks match a given `block_condition` within a given `radius` in a specific `shape` (defaults to cube).

        The [In Block Anywhere `origins:in_block_anywhere` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_block_anywhere/) entity condition checks if a certain number of blocks that match a given `block_condition` are overlapping with the entity's eyes or feet.

        The [In Block `origins:in_block` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_block/) entity condition checks if the block the entity's feet is inside matches a given `block_condition`.

        The [On Block `origins:on_block` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/on_block/) entity condition checks if the block the entity is standing on matches a given `block_condition`.

        The [Submerged In `origins:submerged_in` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/submerged_in/) entity condition checks if the entity's eyes are in the `fluid` specified. 

        The [Fluid Height `origins:fluid_height` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/distance_from_coordinates/) entity condition checks how deep the entity is within a given fluid, where the values get larger the deeper you are. If the entity is not in the liquid, the fluid height will be 0. If the entity is fully under the liquid (they cannot breathe air), this value will be at least 1.5. Higher values than 2.8 wrap back to 1.78.

        The [Distance From Coordinates `origins:distance_from_coordinates` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/distance_from_coordinates/) entity condition checks the entity's position relative to a point in space, either relative to 0,0 or the world spawn.

        The [Collided Horizontally `origins:collided_horizontally` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/collided_horizontally/) entity condition checks if the entity is walking against a block horizontally.

        Condition that checks if the entity is standing on a grass block [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:on_block",
            "block_condition": {
                "type": "origins:block",
                "block": "minecraft:grass_block"
            }
        }
        ```

item-cond:
    title: Item Condition
    text: |
        The following entity conditions allow checking if an item is equipped. Items can be checked via the use of [Item Conditions](https://origins.readthedocs.io/en/latest/types/item_condition_types/). As with regular conditions, [Meta Conditions](https://origins.readthedocs.io/en/latest/types/meta_condition_types/) can be used too.

        The [Equipped Item `origins:equipped_item` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/equipped_item/) entity condition checks if the entity has an item equipped in the specified `equipment_slot` (which can be one of "mainhand", "offhand", "head", "chest", "legs", or "feet").

        The [Using Item `origins:using_item` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/using_item/) entity condition checks if the entity is using an item (eating, drinking, shielding, drawing a bow, etc.).

        The [Using Effective Tool `origins:using_effective_tool` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/using_effective_tool/) entity condition checks if the player entity is using the effective tool of the block they're mining. This condition only works on players.

        Condition which checks if the entity is holding a harvest level 2 or more item [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:equipped_item",
            "equipment_slot": "mainhand",
            "item_condition": {
                "type": "origins:harvest_level",
                "comparison": ">=",
                "compare_to": 2
            }
        }
        ```

raycast-cond:
    title: Raycast Condition
    text: |
        The [Raycast `origins:raycast` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast/) entity condition casts a ray in the direction the "actor" entity is looking until it hits a block or entity, known as the "target".

        TODO

time-cond:
    title: Time Condition
    text: |
        There are two base conditions that allow checking the time.

        The [Daytime `origins:daytime` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/daytime/) entity condition checks if it is daytime in the world. To check for night time, set the `inverted` field on this condition to true.

        The [Time of Day `origins:time_of_day` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/time_of_day/) entity condition compares the current day time of the world (in ticks) to another value. The day time goes from 0 to 24000 and loops around; 23000-24000 (23230) is sunrise, 6000 is noon, 12000-13000 (12780) is sunset, and 18000 is midnight.

        Condition that checks if the sun is setting [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:and",
            "conditions": [
                {
                    "type": "origins:time_of_day",
                    "comparison": ">=",
                    "compare_to": 12000
                },
                {
                    "type": "origins:time_of_day",
                    "comparison": "<=",
                    "compare_to": 13000
                }
            ]
        }
        ```

dimension-cond:
    title: Dimension Condition
    text: |
        The [Dimension `origins:dimension` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/dimension/) entity condition checks whether the entity is in a specified dimension.

        Vanilla dimensions are minecraft:overworld, minecraft:the_nether and minecraft:the_end, but namespace and IDs of custom/modded dimensions should also work.

        Entity condition that checks if the entity is not in the overworld [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:dimension",
            "dimension": "minecraft:overworld",
            "inverted": true
        }
        ```

sky-cond:
    title: Sky Condition
    text: |
        The [Exposed to Sky `origins:exposed_to_sky` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/exposed_to_sky/) entity condition checks if the entity is exposed to the sky, meaning there are no blocks above them.

        Example [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:exposed_to_sky"
        }
        ```

stat-cond:
    title: Stat Condition
    text: |
        All of the powers in this section function in basically the same way; they all involve a "stat" (e.g. health, oxygen, armor) of some kind.

        The [Attribute `origins:attribute` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/attribute/) entity condition checks how much of a given `attribute` the entity has. for a full list of attributes check [the Minecraft Fandom Wiki](https://minecraft.fandom.com/wiki/Attribute#Attributes).

        The [Air `origins:air` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/air/) entity condition checks how much breath/air/bubbles/oxygen the entity has left in ticks. Players (and most mobs) have a max value of 300 ticks (15 secs), while dolphins have a max value of 4800 ticks (240 secs). Axolotls, on the other hand, have a max value of 6000 ticks (300 secs).

        The [Fall Distance `origins:fall_distance` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/fall_distance/) entity condition checks how many blocks the entity has been falling for.

        The [Food Level `origins:food_level` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/food_level/) entity condition checks how many half-hunger legs the player entity has. Food level is in the range of 0 to 20. This condition only works on players.

        The [Saturation Level `origins:saturation_level` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/saturation_level/) entity condition checks how many half-hunger legs of saturation (normally invisible unless you use something like [AppleSkin](https://www.curseforge.com/minecraft/mc-mods/appleskin)) the player entity has. Saturation is in the range of 0 to 20 and can never be greater than the food level. This condition only works on players.

        The [Health `origins:health` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/health/) entity condition checks the current _absolute_ health value of the entity in half-hearts.

        The [Relative Health `origins:relative_health` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/relative_health/) entity condition checks the current health _percentage_ value of the entity, calculated by `currentHealth / maxHealth`.

        The [XP Levels `origins:xp_levels` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/xp_levels/) entity condition checks how many experience levels the player entity has. This condition only works on players.
        
        The [XP Points `origins:xp_points` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/xp_points/) entity condition checks how many experience points the player entity has. This condition only works on players.

        Condition which checks if the entity has 10 or more armor points [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:attribute",
            "attribute": "minecraft:generic.armor",
            "comparison": ">=",
            "compare_to": 10.0
        }
        ```

rain-cond:
    title: Rain Condition
    text: |
        The [In Rain `origins:in_rain` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_rain/) entity condition checks if it is raining at the entity's position.

        Example [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:in_rain"
        }
        ```

fire-cond:
    title: Fire Condition
    text: |
        The [On Fire `origins:on_fire` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/on_fire/) entity condition checks if the entity is on fire.

        Example [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:on_fire"
        }
        ```

riding-cond:
    title: Riding Condition
    text: |
        These entity conditions involve passengers and mounts. They all involve the use of [Bientity Conditions](https://origins.readthedocs.io/en/latest/types/bientity_action_types/). These are special conditions and actions that work on a pair of entities called the "actor" and a "target". The entities in each category depend on the action being used, but generally the "actor" is the entity executing the action (who has the power), and the "target" is an entity being targeted. The "actor" and "target" can be swapped using the [Invert `origins:invert` (Condition)](https://origins.readthedocs.io/en/latest/types/bientity_condition_types/invert/).

        The [Passenger `origins:passenger` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger/) entity condition checks if the entity with the power (the target) is being directly ridden by some other entity (the actor). Note that the actor and the target are inverted here for some reason.

        The [Passenger Recursive `origins:passenger_recursive` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger_recursive/) entity condition checks if the entity with the power (the target) is being directly or indirectly ridden by some other entity (the actor). Note that the actor and the target are inverted here for some reason.

        The [Riding `origins:riding` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger_recursive/) entity condition checks if the entity with the power (the actor) is directly riding an entity (the target).

        The [Riding Recursive `origins:riding_recursive` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding_recursive/) entity condition checks if the entity with the power (the actor) is directly or indirectly riding an entity (the target).

        The [Riding Root `origins:riding_root` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding_root/) entity condition checks if the entity with the power (the actor) is indirectly riding an entity at the start of the riding chain (the target).

        Condition which checks if the entity is riding a minecart [JSON](#json-format)
        ```json
        "condition": {
            "type": "origins:riding",
            "bientity_condition": {
                "type": "origins:target_condition",
                "condition": {
                    "type": "origins:entity_type",
                    "entity_type": "minecraft:minecart"
                }
            }
        }
        ```

server-side-cond:
    title: Score/Command/Predicate/NBT Condition
    text: |
        These entity conditions are by far the most powerful, but as a consequence they only work server-side. This means that they do not work with client side power types such as `origins:climbing`, `origins:entity_glow`, and`origins:shader` won't work with this.

        The [Scoreboard `origins:scoreboard` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/scoreboard/) entity condition checks the entity's score in a scoreboard objective.

        The [Command `origins:command` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/command/) entity condition executes a command and checks the number result, which is the number of things effected or just 1 on command success, or 0 on failure.

        The [Predicate `origins:predicate` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/predicate/) entity condition checks if the entity fulfills a specified [Predicate](https://minecraft.gamepedia.com/Predicate).

        The [NBT `origins:nbt` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/nbt/) entity condition checks if the entity has the given NBT data.

        Condition that checks for 4 or more skeletons within a 64-block radius [JSON](#json-format)
        ```json
        "condition": {
            "type": "origins:command",
            "command": "execute if entity @e[type=#minecraft:skeletons, distance=..64]",
            "comparison": ">=",
            "compare_to": 4
        }
        ```

living-cond:
    title: Living Condition
    text: |
        The [Living `origins:living` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/living/) entity condition checks if the entity is a mob or a player (a LivingEntity).

        Example [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:living"
        }
        ```

moving-cond:
    title: Moving Condition
    text: |
        All of these conditions involve some kind of movement, except for sneaking.

        The [Moving `origins:moving` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/moving/) entity condition checks if the entity is moving horizontally.

        The [Sneaking `origins:sneaking` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/sneaking/) entity condition checks if the player entity is sneaking. This condition only works on players.

        The [Swimming `origins:swimming` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/swimming/) entity condition checks if the entity is in the swimming pose. This condition only works on players.

        The [Sneaking `origins:sneaking` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/sneaking/) entity condition checks if the player entity is sneaking. This condition only works on players.

        The [Climbing `origins:climbing` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/climbing/) entity condition checks if the entity is climbing.

        The [Creative Flying `origins:creative_flying` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/creative_flying/) entity condition checks if the entity is flying with creative-mode-like flight.

        The [Fall Flying `origins:fall_flying` (click here for more info)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/creative_flying/) entity condition checks if the entity is flying with an elytra or elytra like power.

        Condition that checks for sneak-walking [JSON](#json-format):
        ```json
        "condition": {
            "type": "origins:and",
            "conditions": [
                {
                    "type": "origins:moving"
                },
                {
                    "type": "origins:sneaking"
                }
            ]
        }
        ```

other-cond:
    title: Other Condition
    text: |
        A full list of entity conditions can be found on [the official wiki](https://origins.readthedocs.io/en/latest/types/entity_condition_types/). Remember that the [Scoreboard/Command Conditions](#score-cmd-cond) are able to check any command in the game, making it able to do things the other conditions could never do.

        If none of the conditions listed on there provide the functionality you need, there is a very real possibility there is NO condition that does what you want in base origins. However, an addon mod might provide the functionality you need. Here are three great addon mods:
        - [Apugli](https://www.curseforge.com/minecraft/mc-mods/apugli) - [Wiki](https://apugli.readthedocs.io/en/latest/)
        - [Robin's Apoli Additions'](https://www.curseforge.com/minecraft/mc-mods/robins-apoli-additions) - [Wiki](https://raa-docs.readthedocs.io/en/latest/)
        - [Extra Origins](https://legacy.curseforge.com/minecraft/mc-mods/extra-origins) - [Wiki](https://github.com/MoriyaShiine/extra-origins/wiki)

        You can find more addons in the `#addons` channel in the [official Origins Discord](https://discord.gg/4mTMHu3), or by [viewing dependants on CurseForge](https://legacy.curseforge.com/minecraft/mc-mods/origins/relations/dependents?filter-related-dependents=3).
        
        You can also suggest a condition in the `#suggestions` channel in the [official Origins Discord](https://discord.gg/4mTMHu3), or perhaps just write the code for the condition yourself in an addon.