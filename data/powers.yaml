multiple-power:
    title: Multiple
    text: |
        TODO - [Click here for now](#raw-other).

#        The [Multiple `origins:multiple` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/multiple/) power type lets you squish a bunch of custom powers together into a single file.

#        You may want to do this to fit a bunch of different effects into a single power name and description, or just to simplify the work for yourself.
toggleable-power:
    title: Toggleable Power
    text: |
        If you want a custom power that you can toggle, you'll have to use more than one custom power; one of power type ["Toggle"; `origins:toggle`](https://origins.readthedocs.io/en/latest/types/power_types/toggle/) and the other power your custom power type, with the condition ["Power Active"; `origins:power_active`](https://origins.readthedocs.io/en/latest/types/entity_condition_types/power_active/) that points to the toggle power. You can set the "Toggle" power's "Hidden" field to true (or check it) to hide it, or combine the two powers in a [multiple power type](#multiple-power).
pehkui-power:
    title: Pehkui
    text: |
        If you're not super adept at making powers or origins, do NOT make a power using pehkui. You are going to confuse yourself and your brain will explode. Really familiar yourself with simpler concepts first. If you're more comfortable with making origins, then you can continue on this page.

        Modifying your player size is one of the most common things that requires that you install Pehkui mod in addition to the origins mod, but pehkui can be used to modify your mining speed, block reach, and other things with the player as well. You can get [the Pehkui mod here (click)](https://www.curseforge.com/minecraft/mc-mods/pehkui).

        If you just want to modify player size, the simplest way is probably just to install the Extra Origins mod and use the custom `extraorigins:modify_size` power type it provides. [Here's one example (click here)](https://github.com/MoriyaShiine/extra-origins/blob/master/src/main/resources/data/extraorigins/powers/bite_sized.json#L4) of that power type in use. If you're using the Origin Creator, you can use the "custom" option in any drop down where it normally says "single" or "multiple" and type in `extraorigins:modify_size` for the power type yourself.

        If you don't want to just modify player size or want more control over pehkui attributes, you'll have to use an "action" power type and run the /pehkui command through entity actions. Most likely, you'll want to use the [`origins:action_on_callback`](https://origins.readthedocs.io/en/latest/types/power_types/action_on_callback/) power type in combination with the [`origins:execute_command`](https://origins.readthedocs.io/en/latest/types/entity_action_types/execute_command/) entity action. You'll want to test how the command works in-game and also test the variety of entity actions that exist already. This is all the help that most people can provide you.
attribute-power:
    title: Attribute
    text: |
        The [Attribute `origins:attribute` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/attribute/) power type gives/takes away certain numeric values (e.g. max-health/armor/speed) from its user. Note that if you want [a condition](#power-conditions) on this power type, you must use the [Conditioned Attribute `origins:conditioned_attribute` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/conditioned_attribute/) instead.

        This power can provide multiple `modifiers` at once in a list, or just a single `modifier` only. Every modifier takes an "attribute" name (specifying what to modify), an "operation" (specifying how to modify), and a value (specifying how much to modify by).

        Common attribute names ([for full list click here](https://minecraft.fandom.com/wiki/Attribute)) are:

        - `generic.max_health` - maximum health in half hearts. Normally 20.0.
        - `generic.knockback_resistance` - the percentage number of knockback that's ignored (1.0 is 100% or no knockback, 0.5 is 50% or half knockback)
        - `generic.movement_speed` - speed of movement; for players, multiply by about 43 for blocks/second (1 block/s is about 0.023). It's recommended you modify this with a multiply operation.
        - `generic.attack_damage` - attack damage in half hearts.
        - `generic.armor` - armor points (20 for full diamond armor)
        - `generic.armor_toughness` - [armor toughness](https://minecraft.fandom.com/wiki/Armor#Armor_toughness) (8 for diamond armor, 12 for netherite)
        - `generic.attack_knockback` - knockback done by attacks
        - `generic.attack_speed` - number of full strength attacks per second. Defaults to 4.0 with a fist. Other weapons set this value directly.
        - `generic.luck` - "improves" loot from loot tables (some items become more likely to appear); in vanilla, this only applies to fishing. Defaults to 0.0 (meaning multiply operations don't work). This number has nothing to do with a percentage; each level of the status effect luck adds 1.0 to this attribute.

        As for the operation, you only need to know that `addition` adds/subtracts a raw number to the value, and `multiply_base` adds/subtracts a percentage, and all `addition` modifiers occur before `multiply_base` modifiers. Use `addition` when you have a clear number of something (e.g., number of half hearts, armor points, knockback resistance, etc), and `multiply_base` when you don't have a clear number (movement speed).

        A value of 2.5 for `addition` in `generic.max_health` adds a heart and a quarter, while with `generic.knockback_resistance` it adds 2.5%. With `generic.movement_speed`, it adds about 108 blocks/second (2.5*43 is about 108).
        
        A value of 0.5 for `multiply_base` in `generic.max_health` multiplies your health by 1.5x (5 hearts normally), while with `generic.knockback_resistance` it adds nothing (1.5 times no knockback resistance by default is 0). With `generic.movement_speed`, it multiplies your movement speed by 1.5x.

        If you really want to know, `multiply_total` is the same as `multiply_base`, but percentages stack with each other. So while `multiply_base` values of 0.2 (+20% each) would only yield a net result of 0.4 (+40%), two `multiply_total` values of 0.2 (20%) would stack and yield a net result of 0.44 (+44%). There's a bonus 4% (which is 20% of 20%).

        If you're updating `generic.max_health`, there is an additional field called `update_health` for this power that defaults to be true (on). If you set it to false (off), the player's health percentage will not be preserved to the new maximum health. For example, imagine the user has 5 hearts remaining and their max health changes from 10 hearts to 20. If true (default), their health will change to 10 hearts (to preserve 50%). If false, their health will remain at 5 hearts.

        If you want more control over the modifier operation or what to modify something else, the [Modify Attribute power type (click here to learn more about modify powers)](#modify-power) provides many more operators and things to modify.
status-effect-power:
    title: Status Effect
    text: |
        If you simply want a constant status effect that remains permanent even after the user drinks milk, you can use the [Action Over Time `origins:action_over_time`](https://origins.readthedocs.io/en/latest/types/power_types/action_over_time/) power type (that runs an action every so many ticks) instead with the "Entity Action" being an [Apply Effect](#effect-action) action containing the status effect you want. If you want the power to instantly remove the status effect when it deactivates (it's [condition](#power-conditions) becomes false), set the "Falling Action" to a [Clear Effect](#effect-action) action containing the status effect to remove.

        Otherwise, the [Stacking Status Effect `origins:stacking_status_effect` (click for more info)](https://origins.readthedocs.io/en/latest/types/power_types/stacking_status_effect/) power type is a typical way to apply a status effect that increases it's duration (not it's amplifier) over time as the power remains active.

        The Stacking Status Effect works with the concept of "stacks". While the power is active/inactive ([condition](#power-conditions) is true/false), the user gains/loses a stack respectively every so many ticks (determined by the "Tick Rate"). The amount of stacks starts at 0, but increases/decreases until hitting the Max-Stacks/Min-Stacks values respectively. Note that "Min Stacks" can be negative to provide a "buffer" before the status effect is applied. Every time a stack is added (not when a stack is removed) the status effect is reapplied with a duration (in ticks, 20 ticks is a second) equal to `number of stacks * Duration Per Stack`. If the user already has the status effect with a greater duration than what would be applied, the status effect remains the same.

        If you need more control over how and when the status effect is applied, as well as increases or decreases (e.g., you would like the amplifier to increase over time), you'll probably have to use a [Resource (click to learn more)](#resource-power) in combination with several [Action Over Time `origins:action_over_time`](https://origins.readthedocs.io/en/latest/types/power_types/action_over_time/) powers instead. Note that actions can have individual conditions too with [`origins:if_else` and `origins:if_else_list` (click to learn about meta actions)](https://origins.readthedocs.io/en/latest/types/meta_action_types/).
night-vision-power:
    title: Night Vision
    text: |
        The [Night Vision](https://origins.readthedocs.io/en/latest/types/power_types/night_vision/) power type grants night vision to it's owner without giving them the status effect.

        It also has a `strength` field that can range from 0.0-1.0 that specifies how strong the night vision effect is, which defaults to 1.0. As you can imagine, a value of 0.0 does nothing, while a value of 1.0 gives full night vision.

        This specific power (though not any other power types) also has a [Toggle Night Vision](https://origins.readthedocs.io/en/latest/types/power_types/toggle_night_vision/) variant that allows its owner to enable or disable the effects of night vision with a keybind.
creative-flight-power:
    title: Creative Flight
    text: |
        TODO - [Click here for now](#raw-other).
elytra-flight-power:
    title: Elytra Flight
    text: |
        TODO - [Click here for now](#raw-other).
effect-immunity-power:
    title: Effect Immunity
    text: |
        TODO - [Click here for now](#raw-other).
fire-immunity-power:
    title: Fire Immunity
    text: |
        TODO - [Click here for now](#raw-other).
projectile-power:
    title: Projectile
    text: |
        TODO - [Click here for now](#raw-other).
inventory-power:
    title: Inventory
    text: |
        TODO - [Click here for now](#raw-other).
invisibility-power:
    title: Invisibility
    text: |
        TODO - [Click here for now](#raw-other).
invulnerability-power:
    title: Invulnerability
    text: |
        TODO - [Click here for now](#raw-other).
keep-inventory-power:
    title: Keep Inventory
    text: |
        TODO - [Click here for now](#raw-other).
launch-power:
    title: Launch
    text: |
        TODO - [Click here for now](#raw-other).
loot-table-power:
    title: Loot Table
    text: |
        TODO - [Click here for now](#raw-other).
restrict-armor-power:
    title: Restrict Armor
    text: |
        TODO - [Click here for now](#raw-other).
resource-power:
    title: Resources
    text: |
        TODO - [Click here for now](#raw-other).
other-power:
    title: Other
    text: |
        TODO - [Click here for now](#raw-other).



velocity-action:
    title: Velocity Action
    text: |
        TODO - [Click here for now](#raw-other).
xp-action:
    title: XP Action
    text: |
        TODO - [Click here for now](#raw-other).
block-action:
    title: Block Action
    text: |
        TODO - [Click here for now](#raw-other).
effect-action:
    title: Effect Action
    text: |
        TODO - [Click here for now](#raw-other).
health-action:
    title: Health Action
    text: |
        TODO - [Click here for now](#raw-other).
open-inventory-action:
    title: Open Inventory Action
    text: |
        TODO - [Click here for now](#raw-other).
inventory-action:
    title: Inventory Action
    text: |
        TODO - [Click here for now](#raw-other).
sound-action:
    title: Sound Action
    text: |
        TODO - [Click here for now](#raw-other).
spawn-action:
    title: Spawn Action
    text: |
        TODO - [Click here for now](#raw-other).
explode-action:
    title: Explode Action
    text: |
        TODO - [Click here for now](#raw-other).
fire-action:
    title: Fire Action
    text: |
        TODO - [Click here for now](#raw-other).
hunger-action:
    title: Hunger Action
    text: |
        TODO - [Click here for now](#raw-other).
command-action:
    title: Command Action
    text: |
        TODO - [Click here for now](#raw-other).
other-action:
    title: Other Action
    text: |
        TODO - [Click here for now](#raw-other).



biome-cond:
    title: Biome
    text: |
        TODO - [Click here for now](#raw-other).
block-cond:
    title: Block
    text: |
        TODO - [Click here for now](#raw-other).
time-cond:
    title: Time
    text: |
        TODO - [Click here for now](#raw-other).
dimension-cond:
    title: Dimension
    text: |
        TODO - [Click here for now](#raw-other).
sky-cond:
    title: Sky
    text: |
        TODO - [Click here for now](#raw-other).
stat-cond:
    title: Stat
    text: |
        TODO - [Click here for now](#raw-other).
rain-cond:
    title: Rain
    text: |
        TODO - [Click here for now](#raw-other).
fire-cond:
    title: Fire
    text: |
        TODO - [Click here for now](#raw-other).
riding-cond:
    title: Riding
    text: |
        TODO - [Click here for now](#raw-other).
score-cmd-cond:
    title: Score/Command
    text: |
        TODO - [Click here for now](#raw-other).
moving-cond:
    title: Moving
    text: |
        TODO - [Click here for now](#raw-other).
experience-cond:
    title: Experience
    text: |
        TODO - [Click here for now](#raw-other).
other-cond:
    title: Other
    text: |
        TODO - [Click here for now](#raw-other).